name: Deploy and Configure Lambda Functions

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Permissions needed for Github OIDC
permissions:
  id-token: write # Required for requesting the JWT
  contents: read # Required for checking out code

env:
  AWS_REGION: "us-east-1"
  RESEARCH_LAMBDA_FUNCTION_NAME: "HcgBlogContent-Research"
  REWRITE_LAMBDA_FUNCTION_NAME: "HcgBlogContent-Rewrite"

  RESEARCH_LAMBDA_HANDLER: "lambda_handlers.research_handler.main"
  REWRITE_LAMBDA_HANDLER: "lambda_handlers.rewrite_handler.main"

  CONTENT_BUCKET_NAME: "hcg-blog-content"
  POSTS_TABLE_NAME: "HcgBlogContent-Posts"
  SETTINGS_TABLE_NAME: "HcgBlogContent-WebsiteSettings"

  OPENAI_API_KEY_SECRET: ${{ secrets.OPENAI_API_KEY_FOR_LAMBDA }}

jobs:
  deploy:
    name: Build and Deploy Lambda Code
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsLambdaDeploy # Optional descriptive name for the session

      - name: Install dependencies and create package
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          mkdir package
          if [ -f lambda_handlers/requirements.txt ]; then
            pip install -r lambda_handlers/requirements.txt -t ./package
          else
            echo "lambda_handlers/requirements.txt not found, skipping dependency installation."
          fi
          echo "Copying application code..."
          cp -r lambda_handlers ./package/
          cp -r agents ./package/
          echo "Creating deployment package..."
          cd package
          zip -r ../lambda-deployment-package.zip .
          cd ..
          echo "Deployment package created: lambda-deployment-package.zip"

        # The runtime handler (e.g., lambda_handlers.research_handler.main) must be set manually in AWS.
      - name: Deploy Research Lambda
        run: |
          echo "Deploying code package to Research Lambda: ${{ env.RESEARCH_LAMBDA_FUNCTION_NAME }}"
          aws lambda update-function-code \
            --function-name ${{ env.RESEARCH_LAMBDA_FUNCTION_NAME }} \
            --zip-file fileb://lambda-deployment-package.zip \
            --region ${{ env.AWS_REGION }} \
            --publish || echo "Code deployment failed for Research Lambda, proceeding..." 
          echo "Research Lambda deployment complete."

      - name: Wait for Research Lambda update to complete
        run: |
          echo "Waiting for function update to complete..."
          aws lambda wait function-updated \
            --function-name ${{ env.RESEARCH_LAMBDA_FUNCTION_NAME }} \
            --region ${{ env.AWS_REGION }}
          echo "Function update complete."

      - name: Configure Research Lambda
        run: |
          echo "Configuring Research Lambda: ${{ env.RESEARCH_LAMBDA_FUNCTION_NAME }}"
          ENV_VARS="Variables={
            CONTENT_BUCKET_NAME=${{ env.CONTENT_BUCKET_NAME }},
            POSTS_TABLE_NAME=${{ env.POSTS_TABLE_NAME }},
            SETTINGS_TABLE_NAME=${{ env.SETTINGS_TABLE_NAME }},
            OPENAI_API_KEY=${{ env.OPENAI_API_KEY_SECRET }}
          }"
          aws lambda update-function-configuration \
            --function-name ${{ env.RESEARCH_LAMBDA_FUNCTION_NAME }} \
            --role ${{ secrets.AWS_EXECUTION_ROLE }} \
            --handler ${{ env.RESEARCH_LAMBDA_HANDLER }} \
            --environment "$ENV_VARS" \
            --region ${{ env.AWS_REGION }}
          echo "Research Lambda configuration complete."

        # The runtime handler (e.g., lambda_handlers.rewrite_handler.main) must be set manually in AWS.
      - name: Deploy Rewrite Lambda        
        run: |
          echo "Deploying code package to Rewrite Lambda: ${{ env.REWRITE_LAMBDA_FUNCTION_NAME }}"
          aws lambda update-function-code \
            --function-name ${{ env.REWRITE_LAMBDA_FUNCTION_NAME }} \
            --zip-file fileb://lambda-deployment-package.zip \
            --region ${{ env.AWS_REGION }} \
            --publish || echo "Code deployment failed for Rewrite Lambda, proceeding..."
          echo "Rewrite Lambda deployment complete."

      - name: Wait for Research Lambda update to complete
        run: |
          echo "Waiting for function update to complete..."
          aws lambda wait function-updated \
            --function-name ${{ env.REWRITE_LAMBDA_FUNCTION_NAME }} \
            --region ${{ env.AWS_REGION }}
          echo "Function update complete."

      - name: Configure Rewrite Lambda
        env:
          # Pass sensitive env vars needed for THIS function via secrets
          OPENAI_API_KEY_SECRET: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "Configuring Rewrite Lambda: ${{ env.REWRITE_LAMBDA_FUNCTION_NAME }}"
          ENV_VARS="Variables={
            CONTENT_BUCKET_NAME=${{ env.CONTENT_BUCKET_NAME }},
            POSTS_TABLE_NAME=${{ env.POSTS_TABLE_NAME }},
            SETTINGS_TABLE_NAME=${{ env.SETTINGS_TABLE_NAME }},
            OPENAI_API_KEY=${{ env.OPENAI_API_KEY_SECRET }}
          }"
          aws lambda update-function-configuration \
            --function-name ${{ env.REWRITE_LAMBDA_FUNCTION_NAME }} \
            --role ${{ secrets.AWS_EXECUTION_ROLE }} \
            --handler ${{ env.REWRITE_LAMBDA_HANDLER }} \
            --environment "$ENV_VARS" \
            --region ${{ env.AWS_REGION }}
          echo "Rewrite Lambda configuration complete."
