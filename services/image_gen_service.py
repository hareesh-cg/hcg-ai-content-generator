import os
from utils.logger_config import get_logger
from services.base_service import BaseContentService 
from utils.dynamodb_helper import DynamoDBHelper
from utils.s3_helper import S3Helper # To save images
from utils.errors import ServiceError 
from agents.image_gen_openai import execute as generate_openai_image
import utils.constants as Constants

logger = get_logger(__name__)

class ImageGenService(BaseContentService): 
    """Orchestrates the image generation process."""

    def __init__(self):
        super().__init__(service_name="ImageGenService")

    # --- Implement Abstract Properties ---
    @property
    def status_prefix(self) -> str:
        return "IMAGE_GEN"

    @property
    def output_uri_db_key(self) -> str:
        # This service outputs a list of URIs to DynamoDB
        return Constants.IMAGE_URIS 

    # --- Implement Abstract Methods ---

    def _select_agent(self, website_settings: dict, post_item: dict | None = None, previous_step_output: any = None) -> callable:
        """Selects the image generation agent."""
        logger.info(f"[{self.service_name}] Selecting OpenAI DALL-E agent for image generation.")
        return generate_openai_image

    def _call_agent(self, agent_function: callable, post_item: dict, website_settings: dict, event_data: dict) -> any:
        """
        Calls the image generation agent for each prompt found in the post item.
        Returns a list of dictionaries: [{'imageUrl': '...', 'slug': '...'}]
        """
        
        prompt_slug_data = post_item.get(Constants.IMAGE_PROMPTS) 
        if not prompt_slug_data or not isinstance(prompt_slug_data, list) or not all(isinstance(d,dict) for d in prompt_slug_data):
            post_id = post_item.get(Constants.POST_ID, "Unknown")
            logger.error(f"Missing or invalid '{Constants.IMAGE_PROMPTS}' (list of dicts) in fetched post item for postId '{post_id}'.")
            raise ServiceError(f"Required '{Constants.IMAGE_PROMPTS}' not found/invalid for postId '{post_id}'. Has the image prompt step completed successfully?", 400, service_name=self.service_name)
            
        generated_image_results = []
        for i, item in enumerate(prompt_slug_data):
            prompt = item.get("prompt")
            slug = item.get("slug", f"image-{i}") # Default slug if missing

            if not prompt:
                logger.warning(f"[{self.service_name}] Skipping item index {i} due to missing prompt.")
                continue

            logger.info(f"[{self.service_name}] Requesting image {i+1}/{len(prompt_slug_data)} for slug '{slug}', prompt: '{prompt[:80]}...'")
            try:
                event_data["prompt"] = prompt # Pass the prompt to the agent function
                image_url = agent_function(
                    post_item=post_item,
                    website_settings=website_settings,
                    event_data=event_data
                )
                if image_url:
                    # Store both URL and slug for the save step
                    generated_image_results.append({"imageUrl": image_url, "slug": slug}) 
                else:
                    logger.warning(f"[{self.service_name}] Agent returned no URL for prompt index {i}. Skipping.")
            except Exception as e:
                 logger.exception(f"[{self.service_name}] Failed to generate image for prompt index {i} (slug: {slug}). Error: {e}")
                 
        if not generated_image_results:
            raise ServiceError("No images were successfully generated by the agent.", 500, service_name=self.service_name)

        logger.info(f"[{self.service_name}] Agent generation complete. Got {len(generated_image_results)} image results.")
        # Return the list of result dictionaries
        return generated_image_results


    def _save_agent_output(self, website_id: str, post_id: str, agent_output: any) -> str | None:
        """
        Downloads images from URLs returned by the agent and saves them to S3.
        Returns a placeholder string indicating success, as the final URIs are saved to DynamoDB.
        """
        if not isinstance(agent_output, list) or not all(isinstance(d, dict) for d in agent_output):
            logger.error(f"[{self.service_name}] Agent output was not a list of dicts, cannot save images.")
            return None 

        image_s3_uris = []
        for i, result_item in enumerate(agent_output): # agent_output is the list of result dicts
            image_url = result_item.get("imageUrl")
            slug = result_item.get("slug", f"image-{i}") # Use slug from result

            if not image_url:
                logger.warning(f"[{self.service_name}] Skipping image save for index {i} due to missing URL.")
                continue

            logger.info(f"[{self.service_name}] Processing image URL {i+1}: {image_url} (slug: {slug})")
            
            # --- PASS SLUG TO HELPER ---
            s3_uri = self.s3_helper.download_and_save_image_with_slug( # Call new helper method
                image_url=image_url,
                website_id=website_id,
                post_id=post_id,
                slug=slug # Pass the slug
            )
            if s3_uri:
                image_s3_uris.append(s3_uri)
            else:
                logger.warning(f"[{self.service_name}] Failed to download/save image from URL: {image_url}. Skipping.")

        if not image_s3_uris:
            logger.error(f"[{self.service_name}] Failed to save any images to S3 for postId {post_id}.")
            return None # Indicate failure

        logger.info(f"[{self.service_name}] Successfully saved {len(image_s3_uris)} images to S3 for postId {post_id}.")
        
        # --- Save the LIST of S3 URIs to DynamoDB ---
        update_success = self.db_helper.update_post_item(post_id, {Constants.IMAGE_URIS: image_s3_uris})
        if not update_success:
            logger.error(f"[{self.service_name}] Saved images to S3, but failed to update IMAGE_URIS in DynamoDB for postId {post_id}.")
            return None # Indicate failure to update DB

        logger.info(f"[{self.service_name}] Image S3 URIs successfully saved to DynamoDB for postId {post_id}.")
        # Return placeholder string to signal overall success for this step
        return "S3_And_DynamoDB_Updated"


    # --- Override Base Class DB Update Method ---
    def _update_db_uri(self, post_id: str, save_output_result: str | None):
        """Overrides the base method because image URIs list is saved directly in the item during _save_agent_output."""
        if save_output_result == "S3_And_DynamoDB_Updated":
             logger.info(f"[{self.service_name}] Image URIs list already saved to DynamoDB item for postId {post_id}. Skipping standard URI update.")
        else:
             logger.error(f"[{self.service_name}] _save_agent_output did not indicate successful S3/DynamoDB update for postId {post_id}.")
        return save_output_result == "S3_And_DynamoDB_Updated"